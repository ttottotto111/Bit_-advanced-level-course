[ 웹 서비스 프로그래밍 ]


- 웹 서비스로 제공할 수 있는 서비스

   1) 자기만 가지고 있는 정보를 서비스
      - 날씨정보, 가격정보, 주식정보, 지식정보

	http://terraserver.microsoft.net/default.aspx
	=> 구하기 힘든 정보를 웹 서비스를 통해서 클라이언트나 다른 서버들이
            사용할 수 있게 만든 것


   2) 자기만 알고 있는 알고리즘 서비스
      - 유전자 알고리즘, 위치 추적 알고리즘, 복잡한 수학공식, 인공 지능 알고리즘
	
	http://www.gotdotnet.com/playground/services/ThumbnailGen/ThumbnailClient.aspx

	=> 특정 목적의 복잡한 알고리즘을 서비스 개발자가 구현해서 시간이 없거나 구현이 어렵다고
           판단되는 사용자들이 이용할 수 있도록 하는 것.
	    ( gotdotnet.com 사이트의 Thumbnail Generator)

-----------------------------------------------------------------------------------------------------

[ 오목 웹 서비스 ]

오목 어플리케이션의 인공 지능기능을 웹서비스로 제공한다면...

오목 프로그램을 개발하는 개발자는 자신이 구현하려는 프로그램의 개발 환경이나

플랫폼에 맞게 사용자 인터페이스만 구현하면 됨

PC에서 돌아가는 어플리케이션이나 모바일 환경의 어플리케이션 등의 모든 환경에 관계없이

서비스를 제공 받을 수 있다.

[ 오목의 규칙 ]

일 대 일 턴 방식

- 오목을 두는 보드를 오목판이라 하고, 바둑알은 검은 돌, 흰 돌이라 정한다.

- 오목판은 19*19개의 점을 갖고 있고, 모든 돌은 점에 놓여야 한다.

- 보통 실세계에서 두는 오목과 같은 규칙을 갖고 있다.

- 같은 종류의 돌을 갖고 게임을 할 수 없다.

- 돌은 교대로 두는 것이 원칙이다.

- 같은 돌 5개가 연속으로 이어져야 이긴다.(즉, 4,6,7개 등은 승리가 아니다.)

- 삼삼을 허용하지 않는다.


[ 오목 게임의 절차 ]

- 오목 게임을 시작한다.

- 컴퓨터는 오목 게임을 위한 준비를 하고 사용자의 입력을 기다린다.

- 사용자가 (10,10) 위치에 돌을 놓는다.

- 컴퓨터는 현재 바둑판의 상태를 분석하고, 게임이 계속되어야 하는지를 판단한다.

  게임의 승부가 가려지지 않았다면, 컴퓨터 자신이 최적의 점을 찾아서 돌을 두고 다시 

  사용자의 입력을 기다린다.

- 게임의 승부가 날 떄까지 4번 과정을 계속 반복한다.

  게임의 승부가 났다면 게임의 결과를 사용자에게 알려준다.


[ 구현해야 할 오목 웹 서비스 ]


- 서비스 1 : 현재 오목판의 정보를 파악해 다음에 두어야 할 최적의 점을 찾아준다.
             (인공지능 오목 알고리즘)

- 서비스 2 : 현재 오목판에서 특정 점에 돌을 두면, 승리, 삼삼, 아무것도 아님을 

             판단해 준다.

  *) 인공지능 구현을 위해 오목판의 상태를 분석

      승리점(WinJum) : 이 점으로 인해 같은 색의 돌이 연속으로 5개가 되는 경우

      승리확신점(SemiWinJum) : 이 점으로 인해 같은 색의 돌이 연속으로 4개가 되고 양쪽이

			다 뚤려 있을 경우

      공격점(AttackJum) : 이 점으로 인해 같은 색의 돌이 연속으로 3개가 되고 양쪽이 뚫
			려 있을 경우나 같은 색의 돌이 연속으로 4개가 되고 한 쪽이 
			막혀 있을 경우

      공격준비점(AttackReadyJum) : 이 점으로 인해 같은 색의 돌이 연속으로 2개가 되고 
			양쪽이 뚫려있을 경우나 같은 색의 돌이 연속으로 3개가 되고 한쪽이
			막혀 있을 경우

      준비점(ReadyJum) : 이 점으로 인해 같은 색의 돌이 연속으로 2개가 되고, 한쪽이 막혀 있
			을 경우

       일반점(CommonJum) : 앞서 말한 경우에 해당되지 않는 점들

      => 가장 좋게 분류된 점에 놓는 알고리즘 구현
         단 상대방의 입장에서 가장 좋은 점과 자신의 입장에서 가장 좋은 점을 
	 비교해 가장 좋은 점에 자신의 돌을 놓는다.


	
       => 두어야 할 최적의 점을 찾는 과정

	  (오목 웹 서비스)   ----->   ( 최적의 점을 알아내라)

					( 빈 점만 골라낸다)

					(해당 점의 레벨을 조사)


	*) 오목 웹 서비스가 최적의 점을 찾는 과정을 순서대로 살펴보면...

	  1) 사용자는 자기가 두고 있는 오목판에 존재하는 돌의 정보와 이번에 
	     두는 돌의 색깔을 오목웹서비스로 보내면서, 이번에 두어야 하는 
	     최적의 점을 요청한다.

	  2) 사용자에게 받은 정보를 저장하고, 이번에 두는 돌과 그 다음에 두는 
	     돌을 번갈아 가면서 요청한다.

	  3) 사용자가 보내 준 현재 오목판을 조사해 빈 점을 모두 골라낸다.
	    그리고 각각의 빈 점과 그 빈점을 중심으로 4가지 방향 중에 한 방향을
	    선택해 해당 빈 점의 레벨을 요청한다.

	  4) 특정 빈 점과 특정 방향에 대해 레벨을 조사해 돌려준다.

	  5) 빈 점 중에 가장 좋은 점의 위치와 레베릉 돌려준다.

	  6) 두 가지 돌을 기준으로 더 좋은 레벨을 갖고 있는 돌이 둬야 하는 
	    최적의 점을 돌려준다.


	





   *) 오목판에서 자신이 돌을 놓으면 어떤 결과가 발생하는가?

	1) 승리(Win) : 같은 색의 돌이 연속으로 5개가 놓여 있는 경우

	2) 삼삼(SamSam) : 마지막에 둔 돌을 기준으로 2방향에서 연속된 돌이 
			3개가 놓여 있을 경우

	3) 보통(Nothing): 앞선 두 가지 경우에 해당되지 않는 경우

	- 마지막 점을 가지고 파악 

	  - 사용자는 자신이 두고 있는 오목판에 존재하는 돌의 정보와 지금 두려는
		돌의 위치와 종류를 보내면서 어떠한 결과가 생기는지 요청

	  - 사용자에게 받은 오목판의 상태를 저장하고 먼저 이기는 결과인지 알아봄

	  -지금 두려는 돌의 위치에서 모든 방향으로 검사해 이기는지 그렇지 못한지
	 	를 돌려줌

	  - 이기지 못한다면 지금 두려는 돌로 인해 삼삼이 되는지 알아봄

	  - 지금 두려는 돌의 위치를 중심으로 4가지 방향을 번갈아 가면서 연속으로 
		3개가 있는지를 물어봄

	  - 요청한 방향으로 돌이 3개가 되는지 알려줌

	  - 4가지 방향 중에서 2개가 연속된 3개의 돌이 된다면 삼삼이라고 알려줌

	  - 모든 것을 종합해 이기는지, 삼삼인지, 아무것도 아닌지를 사용자에게 알려줌












































  