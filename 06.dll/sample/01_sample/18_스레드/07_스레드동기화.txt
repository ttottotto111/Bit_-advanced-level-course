/*****************************************************************
 * 스레드 동기화
 *   C# 동기화 처리 : lock 키워드를 이용한 동기화 
 *                    System.Threading 네임스페이스의 Monitor, Mutex 
 *                    클래스를 통해 이루어짐 
 * 
 *  시물레이션 : 
 *****************************************************************/
using System;
using System.Threading;

// Monitor를 이용한 임계영역 처리 
class MonitorExam
{
    private static Object obj = new Object();
    int count = 0;
    public MonitorExam(int count)
    {
        this.count = count;
    }
    public void ShowData()
    {
        Monitor.Enter(MonitorExam.obj);             // 객체 잠금 설정 
        //Monitor.TryEnter(MonitorExam.obj, 1000);  // 객체 잠금 설정
        try
        {
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine(Thread.CurrentThread.Name + " : " + i);
                Thread.Sleep(100);
                if (this.count == i) throw (new Exception());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            Monitor.Exit(MonitorExam.obj);      // 객체 잠금 해제 
        }
    }
    public static void Main()
    {
        MonitorExam obj1 = new MonitorExam(5);
        MonitorExam obj2 = new MonitorExam(7);
        Thread t1 = new Thread(new ThreadStart(obj1.ShowData));
        Thread t2 = new Thread(new ThreadStart(obj2.ShowData));
        t1.Name = "Thread - A";
        t2.Name = "Thread - B";
        t1.Start();
        t2.Start();
    }
}
