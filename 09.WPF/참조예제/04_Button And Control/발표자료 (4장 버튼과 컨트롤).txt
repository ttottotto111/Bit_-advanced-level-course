4장 버튼과 컨트롤

WPF 에서는 윈도우 프로그램보다 조금 한정적으로 사용됨.... 

- 윈도우 프로그램에서는 화면상 보이는 모든것이 컨트롤 
- WPF 에서는 사용자와 상호작용을 하는 엘러먼트로 제한함 

WPF에서의 상호작용이란 ?

- 사용자가 마우스나 키보드릴 눌렀을때 어떤 종류의 피드백을 제공하는것을 의미

- TextBlock, Image, Shape 엘리먼트는 모든 키보드 마우스 스타일러스 펜등의 입력을 받을수 있을수 있음
  하지만 입력을 따로 처리하지 않고 무시했었지만 Contorl은 능동적으로 사용자의 입력을 감지하고 처리


Control 클래스의 계층도 ...
Object 
 DispatcherObject
  DependencyObject
   Visual(absetract)
    UIElement
     FrameworkElement
      Control

   
- Control 클래스를 상속받는 클래스는 50개 이상 ! 
Ex) 버튼 리스트 박스 스크롤바 등 ...

이들의 클래스는 System.Windows.Controls와 System.Windows.Controls.Primitives 네임스페이스에 존재
Primitives 네임스페이스에는 Control를 상속하지 않는 다른 클래스도 정의 되어있다.

- Window 와 ButtonBase 모두 동일한 Content 프로퍼티를 가지고 있음

- Windows의 Contents에 대입할수 있는 모든 객체는 버튼의 Content로 사용될수 있다.
  버튼을 비트맵, Shape 객체나 서식이 있는 텍스트로 표시하거나 Button 객체의 Content에 다른 객체를 연결할수도 있다.


- ButtonBase에는 ClickMode라는 프로퍼티가 정의 되어있고. 이는 클릭(Press)이나 마우스가 버튼의 영역에 대한(Hover) 이벤트에 관련있다

- 버튼의 명시적으(Width,Heighy)로 지정하는것이 편리하다. WPF에서는 사용자 화면 해상도에 맞게 컨텐츠의 크기가 자동으로 조절된다. 컨트롤의 크기를 
 지정하면 Margin같은 기능을 사용할수가 없다.

//===========ClickTheButton===================================================================================


// ClickTheButton.cs (c) 2006 by Charles Petzold
//-----------------------------------------------
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Controls.Primitives;

namespace Petzold.ClickTheButton
{
    public class ClickTheButton : Window
    {
        

        [STAThread]
        public static void Main()
        {
            Application app = new Application();
            app.Run(new ClickTheButton());                                                   
        }
        public ClickTheButton()
        {
            Title = "Button Control";

            Button btn = new Button();
            btn.Click += ButtonOnClick;                                                          //버튼 클릭 이벤트

            btn.Content = "_Click me, please!";                                           //버튼 컨트롤에 문자열 추가.."_"는 바로가기 키 설정
            btn.Focus();                                                                  //버튼 컨트롤에 포커스(기본버튼) 설정
            btn.IsDefault = true;                                                         //버튼에 포커스가 없어도 기본 버튼으로 설정하는 프로퍼티 Endter키 등에 반응
            btn.IsCancel = true;                                                          //버튼에 Calcel 기능을 추가하는 프로퍼티 Esc 키 등에 반응하게 된다.

            btn.Margin = new Thickness(96);                                               //엘리먼트의 경겨 바깥에 여백을 부여 ... 여백공간에는 사용자 입력이 안된다.
            btn.HorizontalContentAlignment = HorizontalAlignment.Left;                    //버튼 컨트롤에 할당된 문자열(객체)를 좌측 하단에 배치 (정렬)
            btn.VerticalContentAlignment = VerticalAlignment.Bottom;

            btn.Padding = new Thickness(96);                                              //버튼 내부에 여백을 설정
            btn.HorizontalAlignment = HorizontalAlignment.Center;                         //버튼의 크기를 컨텐츠에 맞게 스스로 조정 창의 위치는 중앙 이미 표시된 후라도 적용 
            btn.VerticalAlignment = VerticalAlignment.Center;
            btn.Width = 96;                                                               //버튼의 크기를 명시적으로 변경
            btn.Height = 96;

            SizeToContent = SizeToContent.WidthAndHeight;                                 //버튼 크기에 맞춰서 창의 크기가 변함 버튼에 설정된 Margin 도 적용됨
            btn.FontSize = 48;                                                            //할당된된 문자열을 변경 폰트 사이즈는 48 폰트종류는 Times New Roman
            btn.FontFamily = new FontFamily("Times New Roman");

            btn.Background = Brushes.AliceBlue;                                           //버튼의 색상 변경  
            btn.Foreground = Brushes.DarkSalmon;
            btn.BorderBrush = Brushes.Magenta;

            Content = btn;                                                                //버튼 객체 자제를 Winodow.Content 프로퍼티 자체에 할당

        }
   	void ButtonOnClick(object sender, RoutedEventArgs args)
        {
            MessageBox.Show("The button has been clicked and all is well.",Title);
        }
}
//=============ClickTheButton End===============================================================



//=============Format Button====================================================================
//-----------------------------------------------
// ClickTheButton.cs (c) 2006 by Charles Petzold
//-----------------------------------------------
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Controls.Primitives;

namespace Petzold.ClickTheButton
{
    public class ClickTheButton : Window
    {
        Run runButton;                                                                           //버튼객체의 이벤트를 외부에서 이벤트를 주기위해 생성한 필드  

        [STAThread]
        public static void Main()
        {
            Application app = new Application();
            app.Run(new ClickTheButton());                                                   
        }
        public ClickTheButton()
        {
            Title = "Button Control";

            Button btn = new Button();

	    SizeToContent = SizeToContent.WidthAndHeight; 
            btn.HorizontalAlignment = HorizontalAlignment.Center;                              //버튼의 크기를 컨텐츠에 맞게 스스로 조정 창의 위치는 중앙 이미 표시된 후라도 적용 
            btn.VerticalAlignment = VerticalAlignment.Center;
           

            #endregion

            //btn.Content = runButton = new Run("Click me, please!");                             //버튼 컨트롤에 문자열 추가.."_"는 바로가기 키 설정

            btn.MouseEnter += ButtonOnMouseEnter;
            btn.MouseLeave += ButtonOnMouseLeave;
	    Content = btn;                                                                       //버튼 객체 자제를 Winodow.Content 프로퍼티 자체에 할당
        }

        void ButtonOnMouseEnter(object sender, MouseEventArgs args)
        {
            runButton.Foreground = Brushes.Red;                                                // 마우스가 버튼 컨트롤 안으로 이동시 발생 
        }
        void ButtonOnMouseLeave(object sender, MouseEventArgs args)
        {
            runButton.Foreground = SystemColors.ControlTextBrush;                             // 마우스가 버튼 컨트롤 밖으로 이동시 발생 
        }
}

//=============Format Button End==================================================================



- WPF에서의 리소스 개념(어셈블리 리소스)
 프로젝트의 일부분 (이진파일)  보통은  실행파일이나 DLL 의 일부가 된다.

- 이미지를 추가하기 위해서는 System.Windows.Media.Imaging; 를 참조 추가하여야한다. 

- 추가 방법 
-> 프로젝트 이름 -> 추가 -> 기존항목 -> 항목을 찾아서 추가 -> 추가된 항목을 선택 -> 속성 -> 빌드 작업을 리소스로 변경



//============Image Button=========================================================================

using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Controls.Primitives;

namespace Petzold.ClickTheButton
{
    public class ClickTheButton : Window
    {

        [STAThread]
        public static void Main()
        {
            Application app = new Application();
            app.Run(new ClickTheButton());                                                   
        }
        public ClickTheButton()
        {
            Title = "Button Control";

            Button btn = new Button();
	    
            Uri uri = new Uri("pack://application:,,/munch.png");                               //Uri 생성자
            BitmapImage bitmap = new BitmapImage(uri);                                          //Uri 생성자를 이용하여 비트맵 객체 생성

            Image img = new Image();                                                            //이미지 객체 생성
            img.Source = bitmap;                                                                //이미지 소스는 생성한 비트맵 객체
            img.Stretch = Stretch.None;                                                         //크기는 이미지 파일 크기로 ...

            btn.Content = img;                                                                  //버튼 Bottun.Content를 이미지 파일로 할당 

            Content = btn;                                                                      //버튼 객체 자제를 Winodow.Content 프로퍼티 자체에 할당
	}
}

//===========Image Button End====================================================================


- 특정한 명령을 이벤트 핸들러와 결합시키는 걸 데이터 바인딩 이라고 한다.
-Binding 
System.Windows.Data 안에 존재하는 클래스
데이터 바인딩을 만들고 설정하는 또 다른 수단. 



//==========Binding Pasete=========================================================================


//-----------------------------------------------
// ClickTheButton.cs (c) 2006 by Charles Petzold
//-----------------------------------------------
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Controls.Primitives;

namespace Petzold.ClickTheButton
{
    public class ClickTheButton : Window
    {
        Run runButton;                                                                           //버튼객체의 이벤트를 외부에서 이벤트를 주기위해 생성한 필드  

        [STAThread]
        public static void Main()
        {
            Application app = new Application();
            app.Run(new ClickTheButton());                                                   
        }
        public ClickTheButton()
        {
            Title = "Button Control";

            Button btn = new Button();

            btn.HorizontalAlignment = HorizontalAlignment.Center;
            btn.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            //btn.Command = ApplicationCommands.Paste;                                            //Application 에 설정되 어 있는 Paste 를 버튼 커멘드로 바인딩 
            //btn.Content = ApplicationCommands.Paste.Text;                                       //Paste 의 이름문자열(붙여넣기)

            CommandBindings.Add(new CommandBinding(ApplicationCommands.Paste,                     //Command에 이벤트 핸들러 바인드 
                               PasteOnExecute, PasteCanExecute));

	    Content = Tbtn;
     }
 	void PasteOnExecute(object sender, ExecutedRoutedEventArgs args)
        {
            Title = Clipboard.GetText();
        }
        void PasteCanExecute(object sender, CanExecuteRoutedEventArgs args)
        {
            args.CanExecute = Clipboard.ContainsText();
        }
        protected override void OnMouseDown(MouseButtonEventArgs args)
        {
            base.OnMouseDown(args);
            Title = "Button Control";
        }
}

		
//=======================Binding Pasete End==========================================================


- 토글 버튼
 CkeckBox나 RadioBox등 여러가지의 항목중에서 하나만 선택 할 수 있게 표시하는것



//======================Togle Button=================================================================


//-----------------------------------------------
// ClickTheButton.cs (c) 2006 by Charles Petzold
//-----------------------------------------------
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Controls.Primitives;

namespace Petzold.ClickTheButton
{
    public class ClickTheButton : Window
    {
        Run runButton;                                                                           //버튼객체의 이벤트를 외부에서 이벤트를 주기위해 생성한 필드  

        [STAThread]
        public static void Main()
        {
            Application app = new Application();
            app.Run(new ClickTheButton());                                                   
        }
        public ClickTheButton()
        {
            Title = "Button Control";

            Button btn = new Button();

 	    ToggleButton Tbtn = new ToggleButton();                                             //토글 버튼 생성
            //CheckBox Tbtn = new CheckBox();                                                   //체크 박스 생성
            Tbtn.Content = "Can _Resize";
            Tbtn.HorizontalAlignment = HorizontalAlignment.Center;
            Tbtn.VerticalAlignment = VerticalAlignment.Center;
            Tbtn.IsChecked = (ResizeMode == ResizeMode.CanResize);                              //리자이즈모드가 가능함 으로 변경 
            Tbtn.SetBinding(ToggleButton.IsCheckedProperty, "SomeProperty");                    //isCheckPorperty을 토글버튼 이벤트와 바인딩
            //Tbtn.Checked += ButtonOnChecked;
            //Tbtn.Unchecked += ButtonOnChecked;
            Content = Tbtn;
     }

        
        void ButtonOnChecked(object sender, RoutedEventArgs args)
        {
            ToggleButton Tbtn = sender as ToggleButton;
            ResizeMode =
                (bool)Tbtn.IsChecked ? ResizeMode.CanResize : ResizeMode.NoResize;
        }
}

//==============Togle Button End========================================================================


C:\Users\Administrator\AppData\Local\Petzold\EditSomeText Text 파일 경로....

