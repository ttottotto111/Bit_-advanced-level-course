버튼과 컨트롤

WPF 에서는 윈도우 프로그램보다 조금 한정적으로 사용됨.... 

- 윈도우 프로그램에서는 화면상 보이는 모든것이 컨트롤 
- WPF 에서는 사용자와 상호작용을 하는 엘러먼트로 제한함 

WPF에서의 상호작용이란 ?

- 사용자가 마우스나 키보드릴 눌렀을때 어떤 종류의 피드백을 제공하는것을 의미

- TextBlock, Image, Shape 엘리먼트는 모든 키보드 마우스 스타일러스 펜등의 입력을 받을수 있을수 있음
  하지만 입력을 따로 처리하지 않고 무시했었지만 Contorl은 능동적으로 사용자의 입력을 감지하고 처리


Control 클래스의 계층도 ...
Object 
 DispatcherObject
  DependencyObject
   Visual(absetract)
    UIElement
     FrameworkElement
      Control

   
Control 클래스를 상속받는 클래스는 50개 이상 ! 

Ex) 버튼 리스트 박스 스크롤바 등 ...

이들의 클래스는 System.Windows.Controls와 System.Windows.Controls.Primitives 네임스페이에 존재
Primitives 네임스페이스에는 Control를 상속하지 않는 다른 클래스도 정의 되어있다.

Content 속성의 형식은 Object이므로 ContentControl에 포함할 수 있는 사항에 제한이 없습니다.Content을를은 ContentPresenter에 의해 나타나며, 이는 
ContentControl의 ControlTemplate 안에 있습니다.WPF의 모든 ContentControl 형식은 해당 기본 ControlTemplate에 ContentPresenter가 있습니다.



- 코드 설명 ... 

 Window 와 ButtonBase 모두 동일한 Content 프로퍼티를 가지고 있음

 -Windows의 Contents에 대힙할수 있는 모든 객체는 버튼의 Content로 사용될수 있다.
  버튼을 비트맵, Shape 객체나 서식이 있는 텍스트로 표시하거나 Button 객체의 Content에 다른 객체를 연결할수도 있다.

 입력 포커스가 최초에는 없지만 Alt를 누르면 버튼에 대입한 문자열 첫 글자에 밑줄이 쳐짐

 이는 입력할 문자열 앞에 "_"을 넣으면 설정되는 바로가기 키 를 사용한 결과..
 탭키나 마우스 왼쪽 버튼을 누르면 입력 포커스가 설정 그후 엔터키나 스페이스 키를 눌려도 버튼을 누를수 있다.

== 버튼 속성 관련 


//btn.Focus();

버튼에 포커스를 설정한 상태 기본으로 Tab키를 눌렀을때와 동일한 상황 Enter키등이 먹힌
 
 //btn.IsDefault = true;    

버튼에 포커스가 없어도 기본 버튼으로 설정하면 Endter키 등에 반응 

// btn.IsCancel = true;                                                               
 
버튼에 Calcel 기능을 추가하는 프로퍼티 Esc 키 등에 반응하게 된다.

보통 Is.. 로 시작하는 두 프로퍼티는 확인과 취소 버튼에 사용됨 한버튼에 다른 프로퍼티를 모두 설정할수 있다.
About 대화 상자에 사용됨

ButtonBase에는 ClickMode라는 프로퍼티가 정의 되어있다. 이는 클릭(Press)이나 마우스 버튼의 영역에 관한(Hover) 이벤트에 관련있다.

//btn.Margin = new Thickness(96);                                                      

엘리먼트의 경겨 바깥에 여백을 부여 ... 여백공간에는 사용자 입력이 안된다.  Thickness(96)구조체는 는 여백의 크기 설정.. 

//btn.HorizontalContentAlignment = HorizontalAlignment.Left;                         
//btn.VerticalContentAlignment = VerticalAlignment.Bottom;

버튼 컨트롤에 할당된 문자열(객체)를 좌측 하단에 배치 (정렬)
HorizontalContentAlignment VerticalContentAlignment 버튼 컨텐츠 위치에 영향을 줌 두 프로퍼티의 기본값은 Stretch 이는 클라이언트 
영역을 가득 채우게라하는 것을 의미
 
 btn.HorizontalAlignment = HorizontalAlignment.Center;                               
 btn.VerticalAlignment = VerticalAlignment.Center;

//버튼의 크기를 컨텐츠에 맞게 스스로 조정 창의 위치는 중앙, 이미 버튼이 표시된 후라도 적용

 btn.Width = 96;                                                                    
 btn.Height = 96;

//버튼의 크기를 명시적으로 변경 
하지만 명시적으로 지정하는것이 편리하다. WPF에서는 사용자 화면 해상도에 맞게 컨텐츠의 크기가 자동으로 조절된다. 컨트롤의 크기를
지정하면 이러한 기능을 사용할수가 없다.

 SizeToContent = SizeToContent.WidthAndHeight;

//버튼 크기에 맞춰서 창의 크기가 변함 버튼에 설정된 Margin 도 적용됨

SizeToContent = SizeToContent.WidthAndHeight;

//버튼 크기에 맞춰서 창의 크기가 변함 버튼에 설정된 Margin 도 적용됨
                                     
btn.FontSize = 48;                                                                            
btn.FontFamily = new FontFamily("Times New Roman");

//할당된된 문자열을 변경 폰트 사이즈는 48 폰트종류는 Times New Roman 
디폴드 값은 em size(8 1/4 포인트) 폰트 종류는 Tahoma

btn.Background = Brushes.AliceBlue;                                                 
btn.Foreground = Brushes.DarkSalmon;
btn.BorderBrush = Brushes.Magenta;

//버튼의 색상 변경
Background 버튼의 배경색상
Foreground 버튼의 전경색상
BorderBrush 버튼의 경계선 색상

===============================



==== 버튼 이벤트

Run runButton;
//버튼객체의 이벤트를 외부에서 이벤트를 주기위해 생성한 필드 
사용을 위해 System.Windows.Documents; 참조 추가

====


==== 버튼을 이미지로 변경

WPF에서의 리소스 개념(어셈블리 리소스)
프로젝트의 일부분 (이진파일)  보통은  실행파일이나 DLL 의 일부가 된다.

이미지를 추가하기 위해서는 System.Windows.Media.Imaging; 를 참조 추가하여야한다. 

추가 방법 
-> 프로젝트 이름 -> 추가 -> 기존항목 -> 항목을 찾아서 추가 -> 추가된 항목을 선택 -> 속성 -> 빌드 작업을 리소스로 변경
      
Image img = new Image();                                                            

//이미지 객체 생성

img.Source = bitmap;                                                                
//이미지 소스는 생성한 비트맵 객체

img.Stretch = Stretch.None;                                                         
//크기는 이미지 파일 크기로 ...



Window Programing 과의 차이점.. 

윈도우 프로그래램 (C#이나 MFC 등)에서는 컨트롤에 사용자의 입력을 처리할려면 하나하나의 이벤트를 생성해 줘야하지만 
WPF에서는 기본으로 포함되어 있는 객체를 사용하여 좀더 직관적인 코딩을 할수 있는 장점이 있고 하나의 객체에 여러가지 
프로퍼티를 사용하여 같은 객체에서 각각 다른 결과를 얻어낼수 있다.

         