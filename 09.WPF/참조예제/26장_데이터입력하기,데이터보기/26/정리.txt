<Grid.Resources> : FrameworkElement.Resources
- 로컬로 정의된 리소스 사전을 가져옮
- XAML에서 XAML 암시적 컬렉션 구문을 통해 frameworkElement.Resources 
속성 요소의 자식 개체 요소로 리소스 항목을 설정할 수 있음

<Grid.RowDefinitions>
- Grid내의 행에 자식 요소를 추가한 경우 행의 Height 속성이 
Auto로 설정되어 있으면 자식의 크기가 제한 없이 측정

DataContext 와 ItemsSource
보통 DataContext는 클래스에서 프로퍼티 같은 것을 넣는다.
ItemsSource는 보통 DataContext멤버를 넣는다.

예를들어,
Public Class Lotte
{
       Property Ghana as Chocolate
       Property JucyFresh as Gum
}

이라는 클래스가 있다면,

DataContext에는 '가나초콜릿' 이나 '껌'을 넣고
      DataContext = Lotte.Ghana;
      DataContext = Lotte.JucyFresh;

ItemSource에는 회사를 넣는 식이다.
      ItemSource = Lotte;

- Type 클래스 :
클래스의 모든 정보를 관리하는 클래스
특정 객체의 타입(Type)만 알고 있다면, 
이 Type을 이용하여 모든 작업을 할 수 있다

- ObservableCollection :
항목이 추가 또는 제거 되거나 전체 목록이 새로 고쳐질때 
알림을 제공하는 동적 데이터 컬렉션이다.

- IEnumerable 인터페이스 : 
내부에 GetEnumerator()추상메서드를 이용하여 
Enumerator의 인스턴스를 얻을 수 있다.  
Enumerator은 현재커서 위치에서 데이터를 추출하는 기능을 지원하며, 
커서를 데이터 집합의 시작점으로 돌리는 기능도 제공한다. 
(순방향으로 검색기능을 제공) 대표적인 예로 Array는 바로 그것이다.

- IList 인터페이스 :
집합적인 개념과 동기화 지원을 위한 기능을 가지고 있으며, 
기본적인 배열 타입이 이 인터페이스를 구현하고 있다.
데이터의 삽입, 삭제, 검색, 인덱스등의 작업을 할 수 있다.