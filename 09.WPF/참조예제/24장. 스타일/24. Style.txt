style 이란 우리가 크게 보면 자신만의 개성이라 보면 되는데 여기서도 자신만의
개성을 첨가하기 위해 생긴 하나의 옵션이라 생각하면 쉬울것이다.

한가지 아쉬운건 여기서 style 은 단 한번만 선언이 가능하다는것.
우리도 옷을 입을땐 여러 스타일을 모두 표현하기 어려운거랑 마찬가지라 생각하면 될거같다.
하지만 style 이 선언이 되 있어도 부분적으로 맘에 안드는 부분이 당연 있으니 그부분만 따로 수정은 가능하다.

style 은 6개의 프로퍼티를 정의한다.
Setters, Resources, TargetType, BasedOn, IsSealed, Triggers
뒤에 소스코드에 한가지씩 소개가 이루어 지니 그때 알면 된다.

style 에서 가장 중요한 프로퍼티는 setters 라는 프로퍼티.
(쉽게 말해서 setter를 class의 생성자와 같은거라 생각하면 될거 같음.)
style 정의의 내부에는 setter 객체가 EventSetter 객체보다 더 많이 쓰임.

Property 속성은 항상 의존 프로퍼티를 참조하지만 이 프로퍼티는 FontSizeProperty가 아닌 FontSize로 명시되었음.
(쉽게 말해서 style 에선 FontSizeProperty 사용 안하니깐 FontSize 사용하라는 것 같음.)

null 값을 value 속성에 명시하고 싶을 때는 마크업 확장 x:Null을 사용.
Value = "{x:Null}"

// 첨보는 용어=====================================================================

margin / padding
간단하게 말해서 margin 은  외부여백, padding은 내부여백입니다.


(1) StartPoint 프로퍼티 : 시작 포인트를 의미한다. (0, 0) ~ (1, 1)의 값을 넣을 수 있으며, 그 이상의 값은 의미가 없다 할 수 있다. 
색상을 입력하는 컨트롤의 크기가 500 x 500 일 때, (0, 0)은 컨트롤의 좌측 상단, (1, 1) 은 컨트롤의 우측하단 (500, 500)을 의미한다. 
즉, Point에 들어가는 값은 절대좌표가 아닌 컨트롤의 상대좌표로 사용된다.
 
(2) EndPoint 프로퍼티 : 그라디언트의 끝 포인트를 의미한다. (0, 0) ~ (1, 1)의 값을 넣을 수 있으며 그 이상의 값은 의미가 없다 할 수 있다. 
StartPoint가 (0, 0)이고 EndPoint가 (1, 1)이라면 컨트롤의 좌측 상단에서 우측 하단으로 그라디언트가 발생한다. 
또한 예제에서처럼 StartPoint가 (0, 0)이고 EndPoint가 (0, 1)이라면 좌측 상단에서 좌측 하단으로, 즉, 위에서 아래로 흐르는 그라디언트가 발생한다. 
마찬가지로 StartPoint가 (1, 0), EndPoint가 (1, 1)이라면 같은 그라디언트가 발생하게 된다. 
즉 StartPoint와 EndPoint는 그라디언트의 방향성과 시작, 끝을 동시에 의미한다고 할 수 있다.
 
(3) GradientStops 프로퍼티
GradientStops프로퍼티는 GradientStopCollection객체를 설정하거나 반환한다. 이름에서 알 수 있듯이 Collection형식이며, 개수에는 제한이 없다. GradientStop이라는 것은 색상의 변화를 줄 때 사용자가 지정하는 색?을 의미한다. 
Add메소드로 GradientStop객체를 추가시킬 수 있고 GradientStop객체를 생성할 때 들어가는 파라미터로는 Color객체(해당 위치에서의 색상값)와 double형 offset(0~1)이 필요하다. offset은 시작포인트에서 얼마나 떨어진 곳에 위치할 것인가를 백분위로 나타내는 것이다. (0이면 0%, 1이면 100퍼센트) 
offset역시 컨트롤의 상대좌표라고 생각할 수 있다.

//=================================================================================

이 후의 style의 내용은 옵션만 변경하면서 장난치는 코드입니다.
그래서 코드를 보고 실행해보고 설명을 보면 이해가 될겁니다. 안되면 개인적으로 문의.

p846에 나오는 반복적인 엘리먼트를 그릴 때 for 루프를 사용을 고려해야 한다고 어쩌구 나오는데
이부분은 나도 당최 이해가 안된다. XAML에서 반복을 줄일 수 있다는건지 먼지...