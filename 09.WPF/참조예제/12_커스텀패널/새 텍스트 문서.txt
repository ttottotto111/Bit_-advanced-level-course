Panel을 상속하는 방법과 Panel을 상속하지 않고서 여러 개의 자식을 지원하는 방법에 대해 
소개하려고 한다.

Panel의 가장큰 선물은 자식들을 저장할 수 있는 children 프로퍼티가 정의 되어 있다는 점이다

children프로프티는 UIElementCollection타입리며, 이 컬렉션에서 자식들이 켈렉션에 추가되거나 

삭제될 때 AddVisualChild, AddlogicalChild, RemoveVisualChild, RemoveLogicalChild의 호출을 
처리 한다.

********************************************
**Panel을 상속 받는 방법
*********************************************

새로운 Panel클래스에서 반드시 구현해야 할 2개의 필수적인 메소드는 
MeasureOverride 와 ArangeOverride다. 
Panel 관련 문서에서 이 메소드를 구현할때 자식 켈렉션을 
얻기 위해서  Children보다는 InternalChildren타입 사용 할 것을 권고 하는 것이다.


***Double.PositiveInfinity***
이 상수의 값은 양수를 0으로 나눈 결과입니다.
연산 결과가 MaxValue보다 크면 이 상수가 반환됩니다.
IsPositiveInfinity 를 사용하여 값이 양의 무한대로 계산되는지 확인하십시오.
PositiveInfinity와 동일한 다른 값에 이 값을 비교하는 방법으로 해당 값이 양의 무한대로 
계산되는
지 
여부를 확인할 수는 없습니다.
           

**UIElement.DesiredSize***

DesiredSize 값은 Measure 호출의 일부로 레이아웃 시스템에서 설정됩니다.

DesiredSize 값은 특히 정렬 처리 단계에서 레이아웃 재정의 동작을 구현하는 경우에 유용합니다. 
시나리오에 따라 레이아웃 논리에서 DesiredSize를 그대로 적용하는 경우도 있고, DesiredSize에 
대해 제약 조건이 적용될 수도 있습니다. 이러한 제약 조건으로 인해 레이아웃의 부모 또는 자식의
다른 특성이 변경될 수도 있습니다. 예를 들어 스크롤 가능한 영역을 지원하는 컨트롤(이미 스크롤 
가능한 영역을 활성화한 상태인 컨트롤에서는 파생할 수 없음)은 사용 가능한 크기를 DesiredSize와
비교할 수 있습니다. 그런 다음 이 컨트롤은 해당 컨트롤에 대해 UI에 스크롤 막대를 사용하도록
설정한 내부 상태를 설정할 수 있습니다. 특정 레이아웃 시나리오에서는 DesiredSize를 무시할 
수도 있습니다.

일반적으로 레이아웃 측정 처리 단계의 일부로 코드를 통해 동일한 요소에서 Measure가 호출되었
거나 UpdateLayout과 같이 전체 레이아웃 처리 단계를 시작하는 메서드가 호출된 컨텍스트 외에는 
DesiredSize 값을 가져오지 않습니다. 이러한 경우가 아니면 DesiredSize에 포함된 값이 적절하다고
 확신할 수 없습니다.



***********************************************************************
**FrameWordElement을 직접 상속하고 직접 자식 켈렉션을 구현하다.
***********************************************************************

Private 필드를 정의해서 구현한다
List<UIElement> Children=new List<UIElement>();

public 프로퍼티 통해 이 컬렉션을 노출시킨다
public List<UIElment>  Children
{
    get { return children; }
}

컬렉션에 자식을 추가 (pnl.Children.Add(btn))
public void Add(UIElement el)
{
children.Add(el);
AddVisualChild(el);
AddLogicalChild(el);
}

삭제
public void Remove(UIElement el)
{
children.Remove(el);
RemoveVisualChild(el);
RemoveLogicalChild(el);
}

